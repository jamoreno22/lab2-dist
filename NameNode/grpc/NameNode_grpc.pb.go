// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeClient interface {
	WriteLog(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Message, error)
	//Centralizado
	SendProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Proposal, error)
	GenerateProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Proposal, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) WriteLog(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/NameNode_grpc.NameNode/WriteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) SendProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Proposal, error) {
	out := new(Proposal)
	err := c.cc.Invoke(ctx, "/NameNode_grpc.NameNode/SendProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) GenerateProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Proposal, error) {
	out := new(Proposal)
	err := c.cc.Invoke(ctx, "/NameNode_grpc.NameNode/GenerateProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServer is the server API for NameNode service.
// All implementations must embed UnimplementedNameNodeServer
// for forward compatibility
type NameNodeServer interface {
	WriteLog(context.Context, *Proposal) (*Message, error)
	//Centralizado
	SendProposal(context.Context, *Proposal) (*Proposal, error)
	GenerateProposal(context.Context, *Proposal) (*Proposal, error)
	mustEmbedUnimplementedNameNodeServer()
}

// UnimplementedNameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (UnimplementedNameNodeServer) WriteLog(context.Context, *Proposal) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}
func (UnimplementedNameNodeServer) SendProposal(context.Context, *Proposal) (*Proposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}
func (UnimplementedNameNodeServer) GenerateProposal(context.Context, *Proposal) (*Proposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateProposal not implemented")
}
func (UnimplementedNameNodeServer) mustEmbedUnimplementedNameNodeServer() {}

// UnsafeNameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServer will
// result in compilation errors.
type UnsafeNameNodeServer interface {
	mustEmbedUnimplementedNameNodeServer()
}

func RegisterNameNodeServer(s grpc.ServiceRegistrar, srv NameNodeServer) {
	s.RegisterService(&_NameNode_serviceDesc, srv)
}

func _NameNode_WriteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).WriteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameNode_grpc.NameNode/WriteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).WriteLog(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_SendProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).SendProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameNode_grpc.NameNode/SendProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).SendProposal(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_GenerateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).GenerateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameNode_grpc.NameNode/GenerateProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).GenerateProposal(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NameNode_grpc.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteLog",
			Handler:    _NameNode_WriteLog_Handler,
		},
		{
			MethodName: "SendProposal",
			Handler:    _NameNode_SendProposal_Handler,
		},
		{
			MethodName: "GenerateProposal",
			Handler:    _NameNode_GenerateProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "NameNode.proto",
}
