// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DataNode.proto

package lab2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Chunk struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Proposal struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Chunk                *Chunk   `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{2}
}

func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Proposal) GetChunk() *Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "lab2.Chunk")
	proto.RegisterType((*Message)(nil), "lab2.Message")
	proto.RegisterType((*Proposal)(nil), "lab2.Proposal")
}

func init() {
	proto.RegisterFile("DataNode.proto", fileDescriptor_2cc4c9d8f36887fb)
}

var fileDescriptor_2cc4c9d8f36887fb = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x50, 0x4f, 0x4b, 0xc3, 0x30,
	0x1c, 0x5d, 0xc6, 0xa6, 0xf3, 0xb7, 0x5a, 0xe4, 0x77, 0x1a, 0x03, 0x41, 0x73, 0xda, 0x41, 0xa2,
	0x56, 0x3c, 0x7a, 0xd1, 0x5e, 0x15, 0xa9, 0xf8, 0x01, 0x52, 0x13, 0xb4, 0xac, 0xe6, 0x17, 0x9a,
	0x0c, 0xfd, 0x9c, 0x7e, 0x22, 0x9b, 0x74, 0xd5, 0x0a, 0xc2, 0x6e, 0x2f, 0xef, 0x4f, 0xde, 0x4b,
	0x20, 0xcd, 0xa5, 0x97, 0x0f, 0xa4, 0xb4, 0xb0, 0x0d, 0x79, 0xc2, 0x49, 0x2d, 0xcb, 0x8c, 0x9f,
	0xc3, 0xf4, 0xee, 0x6d, 0x63, 0xd6, 0x88, 0x30, 0x31, 0xf2, 0x5d, 0x2f, 0xd8, 0x09, 0x5b, 0x1d,
	0x14, 0x11, 0x07, 0x4e, 0xb5, 0xa1, 0xc5, 0xb8, 0xe5, 0x92, 0x22, 0x62, 0x7e, 0x0c, 0xfb, 0xf7,
	0xda, 0x39, 0xf9, 0x1a, 0x65, 0xaf, 0x3f, 0x7d, 0x1f, 0x09, 0x98, 0xdf, 0xc0, 0xec, 0xb1, 0x21,
	0x4b, 0x4e, 0xd6, 0x98, 0xc2, 0xb8, 0xb2, 0x5b, 0xb5, 0x45, 0x78, 0x0a, 0xd3, 0x97, 0xd0, 0x15,
	0xef, 0x9b, 0x67, 0x73, 0x11, 0x16, 0x88, 0x58, 0x5f, 0x74, 0x4a, 0xf6, 0xc5, 0x60, 0xd6, 0xef,
	0xc4, 0x6b, 0x38, 0xca, 0x2b, 0xe7, 0x9b, 0xaa, 0xdc, 0x78, 0x1d, 0x6d, 0x0e, 0xd3, 0x2e, 0xd4,
	0x77, 0x2c, 0x0f, 0xbb, 0xf3, 0x76, 0x12, 0x1f, 0xad, 0x18, 0x9e, 0x01, 0x3c, 0xdb, 0x9a, 0xa4,
	0xba, 0x25, 0x5a, 0xe3, 0xb0, 0xe5, 0x3f, 0xb7, 0x80, 0x24, 0xa7, 0x0f, 0xf3, 0xe3, 0xff, 0x6b,
	0x59, 0x0e, 0xe3, 0x7c, 0x74, 0xc1, 0xf0, 0x12, 0x92, 0x27, 0x6d, 0xd4, 0xef, 0x23, 0x77, 0x0e,
	0x2a, 0xf7, 0xe2, 0x87, 0x5f, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xe3, 0x6a, 0xcf, 0x82,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeClient interface {
	DistributeChunks(ctx context.Context, opts ...grpc.CallOption) (DataNode_DistributeChunksClient, error)
	UploadBook(ctx context.Context, opts ...grpc.CallOption) (DataNode_UploadBookClient, error)
	DownloadBook(ctx context.Context, in *Message, opts ...grpc.CallOption) (DataNode_DownloadBookClient, error)
	//Distribuido
	SendProposal(ctx context.Context, opts ...grpc.CallOption) (DataNode_SendProposalClient, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) DistributeChunks(ctx context.Context, opts ...grpc.CallOption) (DataNode_DistributeChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[0], "/lab2.DataNode/DistributeChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeDistributeChunksClient{stream}
	return x, nil
}

type DataNode_DistributeChunksClient interface {
	Send(*Proposal) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type dataNodeDistributeChunksClient struct {
	grpc.ClientStream
}

func (x *dataNodeDistributeChunksClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeDistributeChunksClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) UploadBook(ctx context.Context, opts ...grpc.CallOption) (DataNode_UploadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[1], "/lab2.DataNode/UploadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeUploadBookClient{stream}
	return x, nil
}

type DataNode_UploadBookClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type dataNodeUploadBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeUploadBookClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeUploadBookClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) DownloadBook(ctx context.Context, in *Message, opts ...grpc.CallOption) (DataNode_DownloadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[2], "/lab2.DataNode/DownloadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeDownloadBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNode_DownloadBookClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type dataNodeDownloadBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeDownloadBookClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) SendProposal(ctx context.Context, opts ...grpc.CallOption) (DataNode_SendProposalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[3], "/lab2.DataNode/SendProposal", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeSendProposalClient{stream}
	return x, nil
}

type DataNode_SendProposalClient interface {
	Send(*Proposal) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type dataNodeSendProposalClient struct {
	grpc.ClientStream
}

func (x *dataNodeSendProposalClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeSendProposalClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataNodeServer is the server API for DataNode service.
type DataNodeServer interface {
	DistributeChunks(DataNode_DistributeChunksServer) error
	UploadBook(DataNode_UploadBookServer) error
	DownloadBook(*Message, DataNode_DownloadBookServer) error
	//Distribuido
	SendProposal(DataNode_SendProposalServer) error
}

// UnimplementedDataNodeServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (*UnimplementedDataNodeServer) DistributeChunks(srv DataNode_DistributeChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method DistributeChunks not implemented")
}
func (*UnimplementedDataNodeServer) UploadBook(srv DataNode_UploadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBook not implemented")
}
func (*UnimplementedDataNodeServer) DownloadBook(req *Message, srv DataNode_DownloadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBook not implemented")
}
func (*UnimplementedDataNodeServer) SendProposal(srv DataNode_SendProposalServer) error {
	return status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_DistributeChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).DistributeChunks(&dataNodeDistributeChunksServer{stream})
}

type DataNode_DistributeChunksServer interface {
	SendAndClose(*Message) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type dataNodeDistributeChunksServer struct {
	grpc.ServerStream
}

func (x *dataNodeDistributeChunksServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeDistributeChunksServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNode_UploadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).UploadBook(&dataNodeUploadBookServer{stream})
}

type DataNode_UploadBookServer interface {
	SendAndClose(*Message) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dataNodeUploadBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeUploadBookServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeUploadBookServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNode_DownloadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServer).DownloadBook(m, &dataNodeDownloadBookServer{stream})
}

type DataNode_DownloadBookServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type dataNodeDownloadBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeDownloadBookServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _DataNode_SendProposal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).SendProposal(&dataNodeSendProposalServer{stream})
}

type DataNode_SendProposalServer interface {
	SendAndClose(*Message) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type dataNodeSendProposalServer struct {
	grpc.ServerStream
}

func (x *dataNodeSendProposalServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeSendProposalServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lab2.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DistributeChunks",
			Handler:       _DataNode_DistributeChunks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadBook",
			Handler:       _DataNode_UploadBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadBook",
			Handler:       _DataNode_DownloadBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendProposal",
			Handler:       _DataNode_SendProposal_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "DataNode.proto",
}
